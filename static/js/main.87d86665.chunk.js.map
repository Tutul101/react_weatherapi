{"version":3,"sources":["components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","searchData","setSearchData","city","setCity","fetchData","a","url","fetch","response","console","log","json","resposejson","useEffect","className","type","onChange","event","target","value","cod","main","temp","feels_like","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAyDeA,EAvDC,WACd,MAAoCC,mBAAS,WAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAKMC,EAAS,uCAAG,gCAAAC,EAAA,6DACVC,EADU,4DACiDN,EADjD,0EAGSO,MAAMD,GAHf,cAGRE,EAHQ,OAIdC,QAAQC,IAAIF,GAJE,SAKYA,EAASG,OALrB,OAKRC,EALQ,OAMdH,QAAQC,IAAIE,GACZT,EAAQS,GAPM,kDASdH,QAAQC,IAAR,MATc,0DAAH,qDAiBf,OAJAG,qBAAU,WACRT,MACC,CAACJ,IAGF,mCACE,sBAAKc,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACE,uBACEC,KAAK,SACLD,UAAU,aACVE,SA5BkB,SAACC,GAE3BhB,EAAcgB,EAAMC,OAAOC,QA2BnBA,MAAOnB,MAGG,MAAbE,EAAKkB,IACJ,mCACE,sBAAKN,UAAU,OAAf,UACE,cAAC,IAAD,CAAcA,UAAU,SACxB,oBAAIA,UAAU,OAAd,SAAsBd,IACtB,qBAAIc,UAAU,OAAd,UAAsBZ,EAAKmB,KAAKC,KAAhC,aACA,+CAAkBpB,EAAKmB,KAAKE,WAA5B,cACA,qBAAIT,UAAU,eAAd,kBACQZ,EAAKmB,KAAKG,SADlB,mBACyCtB,EAAKmB,KAAKI,SADnD,kBAMJ,oBAAIX,UAAU,SAAd,iCCtCKY,MAXf,WACE,OACE,sBAAKZ,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,+CAEF,cAAC,EAAD,QCISa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.87d86665.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FaStreetView } from \"react-icons/fa\";\r\nconst Weather = () => {\r\n  const [searchData, setSearchData] = useState(\"kolkata\");\r\n\r\n  const [city, setCity] = useState({});\r\n  const searchChangeHandler = (event) => {\r\n    // console.log(event.target.value);\r\n    setSearchData(event.target.value);\r\n  };\r\n  const fetchData = async () => {\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${searchData}&units=metric&appid=f2614ab2114a6ddcd2c61d24fb7f5b54`;\r\n    try {\r\n      const response = await fetch(url);\r\n      console.log(response);\r\n      const resposejson = await response.json();\r\n      console.log(resposejson);\r\n      setCity(resposejson);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [searchData]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"box\">\r\n        <div className=\"inputData\">\r\n          <input\r\n            type=\"search\"\r\n            className=\"inputField\"\r\n            onChange={searchChangeHandler}\r\n            value={searchData}\r\n          ></input>\r\n        </div>\r\n        {city.cod === 200 ? (\r\n          <>\r\n            <div className=\"info\">\r\n              <FaStreetView className=\"icon\"></FaStreetView>\r\n              <h2 className=\"city\">{searchData}</h2>\r\n              <h1 className=\"temp\">{city.main.temp}째cel</h1>\r\n              <h4>(Feels Like: {city.main.feels_like}째cel)</h4>\r\n              <h3 className=\"temp_min_max\">\r\n                Min: {city.main.temp_min}째cel | Max : {city.main.temp_max}째cel\r\n              </h3>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <h2 className=\"nodata\">No data found</h2>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Weather;\r\n","import \"./App.css\";\nimport Weather from \"./components/Weather\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h1>Weather APP</h1>\n      </div>\n      <Weather></Weather>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}